# migrations/versions/65c4c58f33c8_add_attendancesession_model_and_update_.py
"""Add AttendanceSession model and update Attendance model

Revision ID: 65c4c58f33c8
Revises: 787935954b66 # Make sure this matches the 'down_revision' in your previous migration if it exists, otherwise set to None
Create Date: 2025-04-14 00:XX:XX.XXXXXX # Adjust date if needed

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import func # Import func for default values if needed

# revision identifiers, used by Alembic.
revision = '65c4c58f33c8'
# IMPORTANT: Replace '787935954b66' with the actual revision ID of your previous
# migration file (the one before this one). If this IS the first migration,
# set down_revision = None
down_revision = '787935954b66' # Or None if it's the first migration
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - manually adjusted! ###
    # Create the attendance_session table first
    op.create_table('attendance_session',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('course_id', sa.Integer(), nullable=False),
        sa.Column('teacher_id', sa.Integer(), nullable=False),
        # Ensure server_default is correctly set for DateTime if using func.now()
        sa.Column('start_time', sa.DateTime(), server_default=func.now(), nullable=True),
        sa.Column('end_time', sa.DateTime(), nullable=True),
        # Explicitly named foreign keys
        sa.ForeignKeyConstraint(['course_id'], ['course.id'], name=op.f('fk_attendance_session_course_id_course')),
        sa.ForeignKeyConstraint(['teacher_id'], ['users.id'], name=op.f('fk_attendance_session_teacher_id_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_attendance_session'))
    )

    # Use batch mode to modify the existing attendance table
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        # Add new columns first
        batch_op.add_column(sa.Column('session_id', sa.Integer(), nullable=False))
        # Ensure server_default is correctly set for DateTime if using func.now()
        batch_op.add_column(sa.Column('marked_at', sa.DateTime(), server_default=func.now(), nullable=True))

        # Create the foreign key constraint with an explicit name
        batch_op.create_foreign_key(
            constraint_name=batch_op.f('fk_attendance_session_id_attendance_session'), # Explicit name added
            referent_table='attendance_session',
            local_cols=['session_id'],
            remote_cols=['id']
        )

        # Drop the old column last
        batch_op.drop_column('date')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - manually adjusted! ###
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        # Add the old column back first
        # Note: Re-adding a non-nullable column to an existing table might require a default value
        # depending on the database and existing data. Adjust if necessary.
        batch_op.add_column(sa.Column('date', sa.DATE(), nullable=False, server_default=func.current_date())) # Added server_default as example

        # Drop the foreign key constraint using the explicit name
        batch_op.drop_constraint(
            constraint_name=batch_op.f('fk_attendance_session_id_attendance_session'), # Use explicit name
            type_='foreignkey'
        )

        # Drop the new columns last
        batch_op.drop_column('marked_at')
        batch_op.drop_column('session_id')

    # Drop the new table
    op.drop_table('attendance_session')
    # ### end Alembic commands ###
